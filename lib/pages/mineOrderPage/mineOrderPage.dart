import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_canteen/common/shared_preference.dart';
import 'package:flutter_canteen/config/param.dart';
import 'package:flutter_canteen/model/autogenerated.dart';
import 'package:flutter_canteen/model/widget.dart';
import 'package:flutter_canteen/otherfunction/logutil.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:pull_to_refresh/pull_to_refresh.dart';
import 'package:flutter_canteen/service/service_method.dart';
import 'mineOrderCard.dart';
import 'mineOrderItem.dart';

class mineOrderPage extends StatefulWidget {
  mineOrderPage();

  @override
  mineOrderState createState() {
    return new mineOrderState();
  }
}

class mineOrderState extends State<mineOrderPage> {
  List<MineOrderItem> children = [];
  Future listData;
  bool isfirstload = true;
  var lastday = DateTime.now().add(Duration(days: 20)); //最前日期
  int i=0;
  RefreshController _refreshController =
  RefreshController(initialRefresh: false);
  String  _getcanteenList(int id_new){
    for(int i = 0;i<canteenlist.length;i++){
      if(canteenlist[i].canteenId.toString() == id_new.toString()){
        return canteenlist[i].canteenName;
      }
    }
    return "无名食堂";
  }


  Widget buildEmpty() {
    return Container(
      width: double.infinity, //宽度为无穷大
      color: Colors.white,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          Image.asset(
            "assets/images/empty1.png",
            fit: BoxFit.cover,
          ),
          Text(
            "没数据,请下拉刷新",
            maxLines: 1,
            style: TextStyle(
              color: Colors.black,
              fontSize: 18.0,
              height: 1.2,
              decoration: TextDecoration.none,
              decorationStyle: TextDecorationStyle.dashed,
            ),
          )
        ],
      ),
    );
  }

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    if (isfirstload) {
      getList();
      isfirstload = false;
    }

    return Container(
        color: Colors.white,
        child: Scaffold(
            appBar: AppBar(
              automaticallyImplyLeading: false,
              centerTitle: true,
              title: Text(
                '我的订单',
                style: TextStyle(color: Colors.black,
                    fontSize: ScreenUtil().setSp(40),
                    fontWeight:FontWeight.w500),
              ),
              backgroundColor: Colors.transparent,
              elevation: 0.0,
              /*   elevation: 0.0,*/
            ),
            body: SmartRefresher(
              controller: _refreshController,
              enablePullUp: children.length == 0,
              enablePullDown: true,
              onLoading: () async {
                await _onLoading();
              },
              onRefresh: () async {
                await getList();
              },
              child: children.length == 0
                  ? buildEmpty()
                  : ListView.builder(
                itemBuilder: (c, i) => new MineOrderCard(
                    category:
                    children.elementAt(children.length - i - 1)),
                itemCount: children.length,
              ),
            )));
  }

  @override
  void dispose() {
    super.dispose();
    _refreshController.dispose();
  }

  void _onLoading() async {
    // monitor network fetch
    await Future.delayed(Duration(milliseconds: 1000));
    // if failed,use loadFailed(),if no data return,use LoadNodata()
    if (mounted) setState(() {});
    _refreshController.loadNoData();
    // _refreshController.loadComplete();
  }

  Future getList() async {
    DateTime fiftyDaysAgo = lastday.subtract(new Duration(days: 30)); //三个月以前的
    String params = '/' +
        userID +
        '/' +
        fiftyDaysAgo.toString().split(" ")[0] +
        '/' +
        lastday.toString().split(" ")[0]+
        '/' +
        0.toString();

    await requestGet('mealListData', params).then((val) {
      print("11111111111111111111111111111111111");
      LogUtil.v(val);

      if(val.toString()=="false") {
        return;
      }
      Autogenerated autogenerated = Autogenerated.fromJson(val);
      if (autogenerated.data != null && autogenerated.data.length > 0) {
        lastday = lastday.subtract(new Duration(days: 31));
        autogenerated.data.forEach((f) {
          MineOrderItem mineOrderState = new MineOrderItem();
          mineOrderState.int_mealtype = f.mealType + 1;
          mineOrderState.state = 0;
          if (f.state != null)
            mineOrderState.state = f.state;
          f.mealType == 0
              ? mineOrderState.goMealType = "早餐"
              : f.mealType == 1
              ? mineOrderState.goMealType = "中餐"
              : mineOrderState.goMealType = "晚餐";
          f.diningStatus == 0
              ? mineOrderState.diningType = "未就餐"
              : mineOrderState.diningType = "已就餐";
          f.state == 0 || f.state == null
              ? mineOrderState.mealType = "未报餐"
              : f.state == 1
              ? mineOrderState.mealType = "已报餐"
              : f.state == 2
              ? mineOrderState.mealType = "不报餐"
              : f.state == 3
              ? mineOrderState.mealType = "留餐"
              : f.state == 4
              ? mineOrderState.mealType = "订餐未确认"
              : f.state == 5
              ? mineOrderState.mealType = "用户已取消"
              : f.state == 6
              ? mineOrderState.mealType = "食堂已确认"
              : mineOrderState.mealType = "食堂已拒绝";
          mineOrderState.time = f.orderDate;
          mineOrderState.mealsPrice = f.price.toString();
          mineOrderState.orderNumber = f.mealstatId.toString();
          mineOrderState.mealsNum = f.quantity.toString();
          mineOrderState.dingmealsNum = f.eaten_quantity.toString();
          mineOrderState.canteenID = f.canteenID;
          mineOrderState.caName = _getcanteenList(f.canteenID);
          mineOrderState.ticketNum = f.ticketNum;
          mineOrderState.costType = f.costType;
          children.add(mineOrderState);
          /*   f.mealType*/
        });
      }
      setState(() {});
      _refreshController.refreshCompleted();
    });
  }
}
